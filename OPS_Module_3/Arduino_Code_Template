// Include the Servo library and define pins
#include <Servo.h>
#define servoPin 3
#define photoPin A2
#define nearButton 7
#define farButton 8

// Default calibration values for our signal filter
int minIRValue = 60; // Minimum IR value to consider valid
int maxIRValue = 600; // Maximum IR value to consider valid

// Variables used by movingAverage() --------------------------------
// How many previous samples should we average together?
#define samples 5 
// Array of size (samples), all values initialized to 0
int buffer[samples] = {0}; 
// Keeps track of which sample we're updating in the buffer
int index = 0; 
// Keeps track of the sum of all the samples in the buffer
int sum = 0; 
// ------------------------------------------------------------------

// Create the servo object (we're naming it myServo)
Servo myServo; 

// Declare our functions
int movingAverage(int);
void calibrateNear();
void calibrateFar();

void setup() {
  // Configure pin modes

  // Attach the servo object to our servo's control pin
  myServo.attach(servoPin);
  // Move the servo to zero? 
  // Sweep it back and forth like a car dashboard when it starts?
  // Blink an LED?
  // Up to you! 

  // Start serial communication (highly recommended for debugging)
  Serial.begin(9600);
}

void loop() {
  // Check if the user has pressed either calibration button
  // If they have, run that calibration function

  // Take a raw reading from the sensor
  int distanceReading = analogRead(photoPin);

  // Compute this reading into our moving average.
  int average = movingAverage(distanceReading);

  // Constrain the averaged value to make sure it's between 
  // our minimum and maximum IR values 
  // Map the value to whatever range of angles we want on the servo
  // Write the angle we just calculated to the servo

  // Delay a bit so we don't sample the transistor too quickly?
  // Bonus question: why might we want a delay between samples?
}

/* movingAverage(newValue) 
  Maintains a moving average of values stored in a buffer
   Input: newValue - next value to be stored in the buffer
   Returns: average of all values stored in the buffer

  We're giving you this code, but feel free to see if you 
  can improve it or make your own filter from scratch!
*/
int movingAverage(int newValue) {
  // Subtract the old value from the sum
  sum -= buffer[index]; 
  // Store the new value in the buffer where the old one was
  buffer[index] = newValue; 
  // Add the value we just got to the sum
  sum += newValue; 
  // Move to the next index in the buffer (% is the modulo operator)
  index = (index + 1) % samples; 
  // Return the average of what's in the buffer now
  return sum / samples; 
}

void calibrateNear() {
  // Tell the user they need to cover the sensor with something
    // Blink an LED? Rotate the servo somewhere?
  // Wait a few seconds to give the user time to cover the sensor
  // Record the sensor reading and store it into maxIRValue

  /* Bonus: 
    What if the reading we get is noisy? 
    Why not take several readings spaced 100ms or so apart and then
    average them together?
    Give it a try!
  */
}

void calibrateFar() {
  // Tell the user to make sure nothing's in front of the sensor
    // Blink an LED? Rotate the servo somewhere?
  // Wait a few seconds to give the user time to clear the sensor
  // Record the sensor reading and store it into minIRValue

  /* Bonus: 
    What if the reading we get is noisy? 
    Why not take several readings spaced 100ms or so apart and then
    average them together?
    Give it a try!
  */
}
